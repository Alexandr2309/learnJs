//13.1
let i = 3;

while (i) {
  alert(i--);// Последним выведет 1. Каждое выполнение цикла будет сначала показывать     значение i, а потом отнимать его на 1
}
//13.2
let j = 0;
while (++j < 5) alert(j); // Последнем выведет от 1 до 4. Каждое выполнение цикла будет сначала увеличивать значение j, затем сравнивать, а уже потом выводить значение. На 5 итерации значение будет равно 4, но но префиксный инкремент применяется перед выводом значения => j станет = 5, то есть не меньше 5.
let k = 0;
while (k++ < 5) alert(k);// от 1 до 5, так как постфиксный инкремент применяется до вывода значения, то сначала число будет равно пред. значению, а потом увеличено на 1 и выведено на экран. 
//13.3
// Оператор for работает по другому. Он выполнит операцию с первоначальным значением переменной, а потом проверяет ее на условие, и после каждой итерации прибавляет к переменной значение по условию, разницы между расположением инкремента нет.
for (let i = 0; i < 5; i++) alert(i);// от 0 до 4
for (let i = 0; i < 5; ++i) alert(i);// от 0 до 4 

// 13.4
for (let i = 2; i <= 10; i++) {
  if (i % 2 == 0) {
    alert(i);
  }
}
/* Или for(let i=2; i<=10; i+=2) alert(i); */
// 13.5
/* 
let i = 0;
while (i < 3) {
  alert(`number ${i}!`);
  i++;
}
for (let i = 0; i < 3; i++) {
  alert(`number ${i}!`);
} 
*/

// 13.6
let answer;
do {
  answer = prompt('Введите число большее 100', 0);
} while (answer < 100 && answer);
//13.7
const n = prompt('Введите число', 2);
for (let i = 2; i <= n; i++) {
  let flag = true;
  for (let j = 2; j < i; j++) {
    if (i % j == 0) {
      flag = false;
      break;
    };
  }
  flag ? alert(i) : '';
}